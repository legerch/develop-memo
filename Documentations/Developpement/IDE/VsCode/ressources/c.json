{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Generate C source file for Cobra project ": {
		"prefix": "cobra-source-c",
		"body": [
		  "/******************************************************************************/",
		  "/**",
		  " * \\module      NETM",
		  " * \\layer       lib",
		  " * \\file        $TM_FILENAME",
		  " * \\brief       Structure to help processing/managing message",
		  " * \\details",
		  " * Add details here",
		  " *",
		  " * \\author      Charlie LEGER",
		  " * \\date        $CURRENT_DATE-$CURRENT_MONTH-$CURRENT_YEAR",
		  " * \\target      SOM Ciele - IMX6 ARM32",
		  " * \\target      SOM Armadeus - IMX8 ARM64 ",
		  " * \\vendor      Borea DENTAL",
		  " *",
		  " * \\copyright   COPYRIGHT $CURRENT_YEAR - Borea DENTAL - All rights reserved           */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Compiler option used to distinguish inclusion done by owner and user       */",
		  "/******************************************************************************/",
		  "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_C_",
		  "",
		  "/******************************************************************************/",
		  "/* Standard headers                                                           */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Own header files                                                           */",
		  "/******************************************************************************/",
		  "#include \"${TM_FILENAME_BASE}.h\"",
		  "",
		  "/******************************************************************************/",
		  "/* Inclusions of local common headers                                         */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Other module header files                                                  */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private macro definitions                                                  */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private enum definitions                                                   */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private type definitions                                                   */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private constant definitions                                               */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private variable definitions                                               */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private functions                                                          */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private callback                                                          */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public slot functions                                                      */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public functions                                                           */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* EOF                                                                        */",
		  "/******************************************************************************/"
		],
		"description": "Generate C source file for Cobra project "
	  }

	  "Generate C header file for Cobra project ": {
		"prefix": "cobra-header-c",
		"body": [
		  "/******************************************************************************/",
		  "/**",
		  " * \\module      NETM",
		  " * \\layer       lib",
		  " * \\file        $TM_FILENAME",
		  " * \\brief       Use to communicate via UDP or TCP protocol",
		  " *",
		  " * \\version     0.0.1",
		  " * \\author      Charlie LEGER",
		  " * \\date        $CURRENT_DATE-$CURRENT_MONTH-$CURRENT_YEAR",
		  " * \\target      SOM Ciele - IMX6 ARM32",
		  " * \\target      SOM Armadeus - IMX8 ARM64 ",
		  " * \\vendor      Borea DENTAL",
		  " *",
		  " * \\copyright   COPYRIGHT $CURRENT_YEAR - Borea DENTAL - All rights reserved           */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Protection against multiple inclusions                                     */",
		  "/******************************************************************************/",
		  "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_",
		  "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_",
		  "",
		  "/******************************************************************************/",
		  "/* Compiler option used to distinguish inclusion done by owner and user       */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Inclusions of local common headers                                         */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Standard headers                                                           */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Other module header files                                                  */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public macro definitions                                                   */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public enumeration declarations                                            */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public type declarations                                                   */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public variable declarations                                               */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public slots declarations                                               */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public function declarations                                               */",
		  "/******************************************************************************/",
		  "",
		  "",
		  "#endif /* ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H_ */",
		  "/******************************************************************************/",
		  "/* EOF                                                                        */",
		  "/******************************************************************************/",
		  ""
		],
		"description": "Generate C header file for Cobra project "
	  }

	  "Use to generate source file with argument parser support": {
		"prefix": "cobra-source-arg-parser-c",
		"body": [
		  "/******************************************************************************/",
		  "/**",
		  " * \\module      HTOOLS",
		  " * \\layer       app",
		  " * \\file        ${TM_FILENAME}",
		  " * \\brief       Demo application used to test helper_tools methods.",
		  " * \\details",
		  " * Add details here",
		  " *",
		  " * \\author      Charlie LEGER",
		  " * \\date        ${CURRENT_DATE}-${CURRENT_MONTH}-${CURRENT_YEAR}",
		  " * \\target      SOM Ciele - IMX6 ARM32",
		  " * \\target      SOM Armadeus - IMX8 ARM64 ",
		  " * \\vendor      Borea DENTAL",
		  " *",
		  " * \\copyright   COPYRIGHT ${CURRENT_YEAR} - Borea DENTAL - All rights reserved           */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Compiler option used to distinguish inclusion done by owner and user       */",
		  "/******************************************************************************/",
		  "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_C_",
		  "",
		  "/******************************************************************************/",
		  "/* Standard headers                                                           */",
		  "/******************************************************************************/",
		  "#include <assert.h>",
		  "#include <errno.h>",
		  "#include <getopt.h>",
		  "#include <stdlib.h>",
		  "#include <stdio.h>",
		  "#include <string.h>",
		  "",
		  "/******************************************************************************/",
		  "/* Own header files                                                           */",
		  "/******************************************************************************/",
		  "#include \"${TM_FILENAME_BASE}.h\"",
		  "",
		  "/******************************************************************************/",
		  "/* Inclusions of local common headers                                         */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Other module header files                                                  */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private macro definitions                                                  */",
		  "/******************************************************************************/",
		  "",
		  "/* Application information */",
		  "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_VERSION \"0.0.1\"",
		  "",
		  "/* Use to for testing */",
		  "#define clean_errno() (errno == 0 ? \"None\" : strerror(errno))",
		  "#define log_error(M, ...) fprintf(stderr, \"[ERROR] (%s:%d: errno: %s) \" M \"\\n\", __FILE__, __LINE__, clean_errno(), ##__VA_ARGS__)",
		  "#define assertf(A, M, ...) if(!(A)) {log_error(M, ##__VA_ARGS__); assert(A); }",
		  "",
		  "/******************************************************************************/",
		  "/* Private enum definitions                                                   */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private type definitions                                                   */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private constant definitions                                               */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private variable definitions                                               */",
		  "/******************************************************************************/",
		  "/* To parse argv",
		  " *put ':' in the starting of the string so that program can distinguish between '?' and ':' */",
		  "static char m_optString[] = \":huv\";",
		  "",
		  "static struct option m_longOptions[] =",
		  "{",
		  "    {\"help\", no_argument, NULL, 'h'},",
		  "    {\"usage\", no_argument, NULL, 'u'},",
		  "    {\"version\", no_argument, NULL, 'v'},",
		  "",
		  "    {NULL, 0, NULL, 0}",
		  "};",
		  "",
		  "/******************************************************************************/",
		  "/* Private functions - App management                                         */",
		  "/******************************************************************************/",
		  "",
		  "/*----------------------------------------------------------------------------*/",
		  "/**",
		  " * \\brief       Print usage of the application",
		  " * \\details",
		  " * This method exit with \\c EXIT_SUCCESS code.",
		  " * ",
		  " * \\param",
		  " * Application name, use \\c argv[0] to do so.",
		  " */",
		  "/*----------------------------------------------------------------------------*/",
		  "static void vPrintUsage(const char *appName)",
		  "{",
		  "    printf(\"Usage: %s [options]\\n\", appName);",
		  "    printf(\"Supported options:\\n\");",
		  "    printf(\"-h|--help : Display help\\n\");",
		  "    printf(\"-u|--usage : Display usage\\n\");",
		  "    printf(\"-v|--version : Display version\\n\\n\");",
		  "",
		  "    exit(EXIT_SUCCESS);",
		  "}",
		  "",
		  "/*----------------------------------------------------------------------------*/",
		  "/**",
		  " * \\brief       Print version of the application",
		  " */",
		  "/*----------------------------------------------------------------------------*/",
		  "static void vPrintVersion(void)",
		  "{",
		  "    printf(\"Application version : %s\\n\", ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_VERSION);",
		  "    printf(\"Dependencies : \\n\");",
		  "    printf(\"Library <name-library> : %s\\n\", \"No version\");",
		  "}",
		  "",
		  "/******************************************************************************/",
		  "/* Private functions - Other management                                       */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Private callback                                                          */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public slot functions                                                      */",
		  "/******************************************************************************/",
		  "",
		  "/******************************************************************************/",
		  "/* Public functions                                                           */",
		  "/******************************************************************************/",
		  "",
		  "/*----------------------------------------------------------------------------*/",
		  "/**",
		  " * \\brief       Main function",
		  " */",
		  "/*----------------------------------------------------------------------------*/",
		  "int main(int argc, char** argv)",
		  "{",
		  "	/* Use for option parsing */",
		  "	int opt;",
		  "",
		  "	/* Manage options arguments */",
		  "	  while ( (opt=getopt_long(argc, argv, m_optString, m_longOptions, NULL)) != -1){",
		  "		",
		  "		switch(opt){",
		  "		case 'h':",
		  "			vPrintUsage(argv[0]);",
		  "			break;",
		  "		case 'u':",
		  "			vPrintUsage(argv[0]);",
		  "			break;",
		  "		case 'v':",
		  "			vPrintVersion();",
		  "			break;",
		  "		case ':':",
		  "			fprintf(stderr, \"Option -%c needs a value\\n\", optopt);",
		  "			vPrintUsage(argv[0]);",
		  "			break;",
		  "		case '?':",
		  "			fprintf(stderr, \"Unknown option : %c\\n\", optopt);",
		  "			vPrintUsage(argv[0]);",
		  "			break;",
		  "		}",
		  "	}",
		  "",
		  "	/* Complete here !*/",
		  "	",
		  "	exit(EXIT_SUCCESS);",
		  "}",
		  "/******************************************************************************/",
		  "/* EOF                                                                        */",
		  "/******************************************************************************/"
		],
		"description": "Use to generate source file with argument parser support"
	  }
}
