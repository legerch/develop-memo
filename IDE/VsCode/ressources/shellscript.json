{
	// Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

    "Shell script template": {
        "prefix": "shell-init",
        "body": [
          "#!/bin/sh",
          "",
          "#",
          "# Use this script to <description>",
          "# ",
          "",
          "#",
          "# CONFIG VARS",
          "#",
          "CFG_SCRIPT_NAME=\"${TM_FILENAME_BASE}\"",
          "CFG_SCRIPT_VERSION=\"1.0.0-dev\"",
          "",
          "#",
          "# CONSTANTES VARS",
          "#",
          "",
          "#",
          "# ERROR MESSAGES",
          "#",
          "STR_ERROR_MEDIA_NOT_EXIST=\"Couldn't find specified media\"",
          "STR_ERROR_MEDIA_NOT_SUPPORT=\"Specified media format is not supported\"",
          "",
          "#",
          "# PRIVATE VARS",
          "#",
          "m_currentDirectory=`pwd`",
          "",
          "m_doMainProcess=0",
          "m_nbEntries=0",
          "",
          "#",
          "# PRIVATE FUNCTIONS - Global Management",
          "#",
          "throwError()",
          "{",
          "    printf \">> ERROR : $*\\n\"",
          "    exit 1",
          "}",
          "",
          "#",
          "# PRIVATE FUNCTIONS - ?? Management",
          "#",
          "",
          "#",
          "# PUBLIC FUNCTIONS",
          "#",
          "usage()",
          "{",
          "    printf \"USAGE : ${CFG_SCRIPT_NAME} [OPTIONS] nb_entries\\n\"",
          "    printf \"OPTIONS\\n\"",
          "",
          "    printf \"\\t-h|--help => Display help\\n\"",
          "    printf \"\\t-v|--version => Get script version\\n\\n\"",
          "}",
          "",
          "displayVersion()",
          "{	",
          "    printf \"${CFG_SCRIPT_VERSION}\\n\"",
          "}",
          "",
          "########",
          "# Main",
          "########",
          "",
          "if [ $# -eq 0 ]",
          "then",
          "    usage",
          "",
          "else",
          "    for i in \"$@\"",
          "    do",
          "        case $i in",
          "",
          "        -h|--help)",
          "        usage",
          "        ;;",
          "",
          "        -v|--version)",
          "        displayVersion",
          "        ;;",
          "",
          "        *)",
          "        argTmp=\"${i#*=}\"",
          "",
          "        m_nbEntries=\"${argTmp}\"",
          "        m_doMainProcess=1",
          "        ;;",
          "        esac",
          "    done",
          "fi",
          "",
          "# Main process",
          "if [ ${m_doMainProcess} -eq 1 ]; then",
          "    # Do main process",
          "fi"
        ],
        "description": "Shell script template"
      }

      "Bash script template": {
        "prefix": "bash-init",
        "body": [
          "#!/bin/sh",
          "",
          "#",
          "# Use this script to <description>",
          "# ",
          "",
          "#",
          "# CONFIG VARS",
          "#",
          "CFG_SCRIPT_NAME=\"${TM_FILENAME_BASE}\"",
          "CFG_SCRIPT_VERSION=\"1.0.0-dev\"",
          "",
          "#",
          "# CONSTANTES VARS",
          "#",
          "",
          "#",
          "# ERROR MESSAGES",
          "#",
          "STR_ERROR_MEDIA_NOT_EXIST=\"Couldn't find specified media\"",
          "STR_ERROR_MEDIA_NOT_SUPPORT=\"Specified media format is not supported\"",
          "",
          "#",
          "# PRIVATE VARS",
          "#",
          "m_currentDirectory=`pwd`",
          "",
          "m_doMainProcess=0",
          "m_nbEntries=0",
          "",
          "#",
          "# PRIVATE FUNCTIONS - Global Management",
          "#",
          "throwError()",
          "{",
          "    printf \">> ERROR : $*\\n\"",
          "    exit 1",
          "}",
          "",
          "#",
          "# PRIVATE FUNCTIONS - ?? Management",
          "#",
          "",
          "#",
          "# PUBLIC FUNCTIONS",
          "#",
          "usage()",
          "{",
          "    printf \"USAGE : ${CFG_SCRIPT_NAME} [OPTIONS] nb_entries\\n\"",
          "    printf \"OPTIONS\\n\"",
          "",
          "    printf \"\\t-h|--help => Display help\\n\"",
          "    printf \"\\t-v|--version => Get script version\\n\\n\"",
          "}",
          "",
          "displayVersion()",
          "{	",
          "    printf \"${CFG_SCRIPT_VERSION}\\n\"",
          "}",
          "",
          "########",
          "# Main",
          "########",
          "",
          "if [ $# -eq 0 ]",
          "then",
          "    usage",
          "",
          "else",
          "    for i in \"$@\"",
          "    do",
          "        case $i in",
          "",
          "        -h|--help)",
          "        usage",
          "        ;;",
          "",
          "        -v|--version)",
          "        displayVersion",
          "        ;;",
          "",
          "        *)",
          "        argTmp=\"${i#*=}\"",
          "",
          "        m_nbEntries=\"${argTmp}\"",
          "        m_doMainProcess=1",
          "        ;;",
          "        esac",
          "    done",
          "fi",
          "",
          "# Main process",
          "if [ ${m_doMainProcess} -eq 1 ]; then",
          "    # Do main process",
          "fi"
        ],
        "description": "Bash script template"
      }
}